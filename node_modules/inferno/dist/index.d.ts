// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../../../packages/inferno/inferno-shared
//   ../../../../packages/inferno/inferno-vnode-flags
//   ../../../../packages/inferno/inferno

declare module 'inferno' {
    import { NO_OP } from 'inferno-shared';
    import { createComponentVNode, createTextVNode, createVNode, directClone, getFlagsForElementVnode, InfernoChildren, InfernoInput, normalizeProps, options, Props, Refs, VNode } from 'inferno/core/implementation';
    import { linkEvent } from 'inferno/DOM/events/linkEvent';
    import { createPortal, createRenderer, render } from 'inferno/DOM/rendering';
    import { EMPTY_OBJ } from 'inferno/DOM/utils/common';
    import { Component } from 'inferno/core/component';
    import { getNumberStyleValue } from 'inferno/DOM/props';
    import { hydrate } from 'inferno/DOM/hydration';
    const version: string | undefined;
    export { Component, EMPTY_OBJ, InfernoChildren, InfernoInput, NO_OP, Props, Refs, VNode, createComponentVNode, createPortal, createRenderer, createTextVNode, createVNode, directClone, getFlagsForElementVnode, getNumberStyleValue, hydrate, linkEvent, normalizeProps, options, render, version };
}

declare module 'inferno/core/implementation' {
    import { ChildFlags, VNodeFlags } from 'inferno-vnode-flags';
    export interface VNode {
        children: InfernoChildren;
        childFlags: ChildFlags;
        dom: Element | null;
        className: string | null | undefined;
        flags: VNodeFlags;
        isValidated?: boolean;
        key: null | number | string;
        parentVNode: VNode | null;
        props: Props | null;
        ref: Ref | Refs | null;
        type: any;
    }
    export type InfernoInput = VNode | null | string | number;
    export type Ref = (node?: Element | null) => any;
    export type InfernoChildren = string | number | boolean | undefined | VNode | Array<string | number | VNode> | null;
    export interface Props {
        children?: InfernoChildren;
        ref?: Ref | null;
        key?: any;
        className?: string;
        [k: string]: any;
    }
    export interface Refs {
        onComponentDidMount?: (domNode: Element) => void;
        onComponentWillMount?(): void;
        onComponentShouldUpdate?(lastProps: any, nextProps: any): boolean;
        onComponentWillUpdate?(lastProps: any, nextProps: any): void;
        onComponentDidUpdate?(lastProps: any, nextProps: any): void;
        onComponentWillUnmount?(domNode: Element): void;
    }
    export function createVNode(flags: VNodeFlags, type: any, className?: string | null, children?: InfernoChildren, childFlags?: ChildFlags, props?: Props | null, key?: string | number | null, ref?: Ref | Refs | null): VNode;
    export function createComponentVNode(flags: VNodeFlags, type: any, props?: Props | null, key?: null | string | number, ref?: Ref | Refs | null): VNode;
    export function createTextVNode(text?: string | number, key?: string | number | null): VNode;
    export function normalizeProps(vNode: any): any;
    export function directClone(vNodeToClone: VNode): VNode;
    export function createVoidVNode(): VNode;
    export function _normalizeVNodes(nodes: any[], result: VNode[], index: number, currentKey: string): void;
    export function getFlagsForElementVnode(type: string): VNodeFlags;
    export function normalizeChildren(vNode: VNode, children: any): VNode;
    export const options: {
        afterMount: null | Function;
        afterRender: null | Function;
        afterUpdate: null | Function;
        beforeRender: null | Function;
        beforeUnmount: null | Function;
        createVNode: null | Function;
        roots: any[];
    };
}

declare module 'inferno/DOM/events/linkEvent' {
    /**
      * Links given data to event as first parameter
      * @param {*} data data to be linked, it will be available in function as first parameter
      * @param {Function} event Function to be called when event occurs
      * @returns {{data: *, event: Function}}
      */
    export function linkEvent(data: any, event: any): {
        data: any;
        event: any;
    } | null;
}

declare module 'inferno/DOM/rendering' {
    import { InfernoChildren, InfernoInput, VNode } from 'inferno/core/implementation';
    export function render(input: InfernoInput, parentDom: Element | SVGAElement | DocumentFragment | HTMLElement | Node | null, callback?: Function): InfernoChildren;
    export function createRenderer(parentDom?: any): (lastInput: any, nextInput: any) => void;
    export function createPortal(children: any, container: any): VNode;
}

declare module 'inferno/DOM/utils/common' {
    export const EMPTY_OBJ: {};
    export const LIFECYCLE: Function[];
    export function appendChild(parentDom: any, dom: any): void;
    export function insertOrAppend(parentDom: any, newNode: any, nextNode: any): void;
    export function documentCreateElement(tag: any, isSVG: boolean): Element;
    export function replaceChild(parentDom: any, newDom: any, lastDom: any): void;
    export function removeChild(parentDom: Element, dom: Element): void;
    export function callAll(arrayFn: Function[]): void;
}

declare module 'inferno/core/component' {
    import { Props, VNode } from 'inferno/core/implementation';
    export class Component<P, S> {
        static defaultProps: {} | null;
        state: S | null;
        props: P & Props;
        context: any;
        $BR: boolean;
        $BS: boolean;
        $PSS: boolean;
        $PS: S | null;
        $LI: any;
        $V: VNode | null;
        $UN: boolean;
        $CX: null;
        $UPD: boolean;
        $QU: Function[] | null;
        constructor(props?: P, context?: any);
        componentDidMount?(): void;
        componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: P, nextContext: any): void;
        shouldComponentUpdate?(nextProps: P, nextState: S, nextContext: any): boolean;
        componentWillUpdate?(nextProps: P, nextState: S, nextContext: any): void;
        componentDidUpdate?(prevProps: P, prevState: S, prevContext: any): void;
        componentWillUnmount?(): void;
        getChildContext?(): void;
        forceUpdate(callback?: Function): void;
        setState(newState: {
            [k in keyof S]?: S[k];
        } | Function, callback?: Function): void;
        render(nextProps?: P, nextState?: any, nextContext?: any): any;
    }
}

declare module 'inferno/DOM/props' {
    import { VNode } from 'inferno';
    export function patchEvent(name: string, lastValue: any, nextValue: any, dom: any): void;
    export function getNumberStyleValue(style: string, value: number): string | number;
    export function patchProp(prop: any, lastValue: any, nextValue: any, dom: Element, isSVG: boolean, hasControlledValue: boolean, lastVNode: VNode | null): void;
    export function mountProps(vNode: any, flags: any, props: any, dom: any, isSVG: any): void;
}

declare module 'inferno/DOM/hydration' {
    export function hydrate(input: any, parentDom: Element, callback?: Function): void;
}

